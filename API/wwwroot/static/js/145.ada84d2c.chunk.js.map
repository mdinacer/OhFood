{"version":3,"file":"static/js/145.ada84d2c.chunk.js","mappings":"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","sources":["app/components/AppPagination.tsx","app/hooks/useOrders.tsx","features/AdminPanel/orders/AdminOrdersPage.tsx","../node_modules/@mui/icons-material/esm/DoDisturb.js","../node_modules/@mui/icons-material/esm/Recommend.js"],"sourcesContent":["import {Pagination, Typography} from \"@mui/material\";\nimport {Box} from \"@mui/system\";\nimport {useState} from \"react\";\nimport {MetaData} from \"../models/pagination\";\n\ninterface Props {\n    metaData: MetaData;\n    onPageChange: (page: number) => void;\n}\n\nexport default function AppPagination({metaData, onPageChange}: Props) {\n    const {currentPage, totalCount, totalPages, pageSize} = metaData;\n    const [pageNumber, setPageNumber] = useState(currentPage);\n\n    function handlePageChange(page: number) {\n        setPageNumber(page);\n        onPageChange(page);\n    }\n\n    return (\n        <Box display='flex' justifyContent='space-between' alignItems='center'  width={\"100%\"} sx={{flexDirection:{xs:\"column\", md:\"row\"} , my:3}}>\n            <Typography variant={\"body2\"} gutterBottom>\n                Showing {(currentPage - 1) * pageSize + 1} to {currentPage * pageSize > totalCount\n                    ? totalCount\n                    : currentPage * pageSize} of {totalCount} items\n            </Typography>\n            {metaData && metaData.totalPages > 1 && (\n                <Pagination sx={{flexWrap:\"nowrap\", mb: {xs:7, md:1}, mt:{xs:2,md:0}}}\n                    color='primary'\n                    size='medium'\n                    count={totalPages}\n                    page={pageNumber}\n                    defaultPage={1}\n                    siblingCount={1}\n                    onChange={(e, page) => handlePageChange(page)}\n                />\n            )}\n        </Box>\n    )\n}","import {useAppDispatch, useAppSelector} from \"../store/configureStore\";\nimport {useEffect} from \"react\";\nimport {fetchOrdersAsync, orderSelectors} from \"../slices/orderSlice\";\n\nexport default function useOrders() {\n    const orders = useAppSelector(orderSelectors.selectAll);\n    const {\n        ordersLoaded,\n        metaData,\n    } = useAppSelector((state) => state.order);\n    const dispatch = useAppDispatch();\n\n\n    useEffect(() => {\n        if (!ordersLoaded) {\n            dispatch(fetchOrdersAsync());\n        }\n    }, [dispatch, ordersLoaded]);\n\n\n    return {\n        orders,\n        ordersLoaded,\n        metaData,\n    };\n}","import {Box, Stack, Table, TableBody, TableCell, TableHead, TableRow, Typography} from \"@mui/material\";\nimport {format} from 'date-fns'\nimport useOrders from \"../../../app/hooks/useOrders\";\nimport {useAppDispatch, useAppSelector} from \"../../../app/store/configureStore\";\nimport AppPagination from \"../../../app/components/AppPagination\";\nimport {setPageNumber, updateOrder} from \"../../../app/slices/orderSlice\";\nimport {DoDisturb, Recommend} from \"@mui/icons-material\";\nimport {useState} from \"react\";\nimport agent from \"../../../app/api/agent\";\nimport {LoadingButton} from \"@mui/lab\";\nimport {OrderStatus} from \"../../../app/models/order\";\n\nconst orderStatus = [\n    {name: \"Pending\", value: 0, color: \"orange\"},\n    {name: \"Confirmed\", value: 1, color: \"green\"},\n    {name: \"Delivered\", value: 2, color: \"green\"},\n    {name: \"Cancelled\", value: 3, color: \"red\"},\n]\n\n\nexport default function AdminOrdersPage() {\n    const dispatch = useAppDispatch();\n    const [loading, setLoading] = useState(false);\n    const [target, setTarget] = useState(0);\n    const {orders, ordersLoaded, metaData} = useOrders();\n    const {orderParams,} = useAppSelector(state => state.order);\n\n\n    function updateOrderStatus(entityId: number, value: string) {\n        setLoading(true);\n        setTarget(entityId);\n        agent.Orders.updateStatus(entityId, value)\n            .then(response => {\n                console.log(response);\n                dispatch(updateOrder({id: entityId, changes: {status: value}}))\n            })\n            .catch(e => console.log(e))\n            .finally(() => setLoading(false));\n    }\n\n\n    if (!ordersLoaded) return <div>Loading Orders</div>\n\n    return (\n        <>\n            <Box>\n                <Typography variant={\"h3\"} component={\"h1\"}>Orders</Typography>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Date</TableCell>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Ship To</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell align=\"right\">Total</TableCell>\n                            <TableCell/>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {orders.map((order) => (\n                            <TableRow key={order.id}>\n                                <TableCell>{format(new Date(order.orderDate), 'MM/dd/yyyy HH:mm')}</TableCell>\n                                <TableCell>{order.shippingAddress.fullName}</TableCell>\n                                <TableCell>{order.shippingAddress.address1} - {order.shippingAddress.city}</TableCell>\n                                <TableCell>\n                                    {order.status}\n                                </TableCell>\n                                <TableCell align=\"right\">{`$${order.total}`}</TableCell>\n                                <TableCell align=\"right\">\n                                    <Stack direction={\"row\"} justifyContent={\"space-around\"}>\n                                        <LoadingButton\n                                            onClick={() => updateOrderStatus(order.id, \"Confirmed\")}\n                                            loading={loading && target === order.id} disableElevation\n                                            disabled={order.status !== \"Pending\"} size={\"small\"}\n                                            variant={\"contained\"} color={\"success\"}>\n                                            <Recommend/>\n                                        </LoadingButton>\n                                        <LoadingButton\n                                            onClick={() => updateOrderStatus(order.id, \"Cancelled\")}\n                                            loading={loading && target === order.id} disableElevation\n                                            disabled={order.status === \"Cancelled\"} size={\"small\"}\n                                            variant={\"contained\"} color={\"error\"}>\n                                            <DoDisturb/>\n                                        </LoadingButton>\n                                    </Stack>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n                <Box>\n                    {metaData &&\n                        <AppPagination\n                            metaData={metaData}\n                            onPageChange={(page: number) => dispatch(setPageNumber({pageNumber: page}))}\n                        />}\n                </Box>\n            </Box>\n        </>\n    )\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zM4 12c0-4.4 3.6-8 8-8 1.8 0 3.5.6 4.9 1.7L5.7 16.9C4.6 15.5 4 13.8 4 12zm8 8c-1.8 0-3.5-.6-4.9-1.7L18.3 7.1C19.4 8.5 20 10.2 20 12c0 4.4-3.6 8-8 8z\"\n}), 'DoDisturb');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm6 9.8a.9.9 0 0 1-.1.5l-2.1 4.9a1.34 1.34 0 0 1-1.3.8H9a2 2 0 0 1-2-2v-5a1.28 1.28 0 0 1 .4-1L12 5l.69.69a1.08 1.08 0 0 1 .3.7v.2L12.41 10H17a1 1 0 0 1 1 1z\"\n}), 'Recommend');"],"names":["AppPagination","metaData","onPageChange","currentPage","totalCount","totalPages","pageSize","useState","pageNumber","setPageNumber","display","justifyContent","alignItems","width","sx","flexDirection","xs","md","my","variant","gutterBottom","flexWrap","mb","mt","color","size","count","page","defaultPage","siblingCount","onChange","e","handlePageChange","useOrders","orders","useAppSelector","orderSelectors","state","order","ordersLoaded","dispatch","useAppDispatch","useEffect","fetchOrdersAsync","AdminOrdersPage","loading","setLoading","target","setTarget","orderParams","updateOrderStatus","entityId","value","agent","then","response","console","log","updateOrder","id","changes","status","catch","finally","component","align","map","format","Date","orderDate","shippingAddress","fullName","address1","city","total","direction","onClick","disableElevation","disabled","createSvgIcon","_jsx","d"],"sourceRoot":""}