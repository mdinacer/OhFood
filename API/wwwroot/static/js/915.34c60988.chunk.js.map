{"version":3,"file":"static/js/915.34c60988.chunk.js","mappings":"6TASe,SAASA,IAAW,IAAD,MACxBC,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAQ,CAACC,KAAM,QAJfC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,SAHJ,IAIIC,UAAYC,EAJhB,EAIgBA,aAAcC,EAJ9B,EAI8BA,OAAQC,EAJtC,EAIsCA,QAiBtC,OACG,SAAC,IAAD,CAAKC,UAAW,UAAhB,UACI,UAAC,IAAD,CAAWA,UAAW,aAAcC,UAAWC,EAAAA,EAAOC,SAAS,KAAKC,GAAI,CAAEC,QAAS,OAAQC,cAAe,SAAUC,WAAY,SAAUC,EAAG,GAA7I,WACI,SAAC,IAAD,CAAQJ,GAAI,CAAEK,EAAG,EAAGC,QAAS,gBAA7B,UACI,SAAC,IAAD,OAEJ,SAAC,IAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAKP,GAAI,CAACQ,MAAM,SAAnD,6BAGA,UAAC,IAAD,CAAKX,UAAU,OACVY,SAAUnB,GAAa,SAACoB,GAAD,OACnBC,EAAAA,EAAAA,QAAAA,SAAuBD,GAClBE,MAAK,WACFC,EAAAA,GAAAA,QAAc,+CACd5B,EAAS,aAGZ6B,OAAM,SAAAC,GAAK,OA/BpC,SAAyBrB,GACjBA,GACAA,EAAOsB,SAAQ,SAACD,GACRA,EAAME,SAAS,YACf1B,EAAS,WAAY,CAAC2B,QAASH,IACxBA,EAAME,SAAS,SACtB1B,EAAS,QAAS,CAAC2B,QAASH,IACrBA,EAAME,SAAS,aACtB1B,EAAS,WAAY,CAAC2B,QAASH,OAI3CI,QAAQC,IAAI1B,GAmBwB2B,CAAgBN,SAExCO,YAAU,EAACtB,GAAI,CAAEuB,GAAI,GAV1B,WAYI,SAAC,KAAD,gBACIC,OAAO,SACPC,WAAS,EACTC,MAAM,WACNC,WAAS,GACLtC,EAAS,WAAY,CAAEuC,SAAU,0BALzC,IAMIb,QAASrB,EAAOmC,SAChBC,WAAU,OAAEpC,QAAF,IAAEA,GAAF,UAAEA,EAAQmC,gBAAV,aAAE,EAAkBX,YAElC,SAAC,KAAD,gBACIM,OAAO,SACPC,WAAS,EACTC,MAAM,iBACFrC,EAAS,QAAS,CAClBuC,SAAU,oBACVG,QAAS,CACLC,MAAO,4CACPd,QAAS,gCARrB,IAWIH,QAASrB,EAAOuC,MAChBH,WAAU,OAAEpC,QAAF,IAAEA,GAAF,UAAEA,EAAQuC,aAAV,aAAE,EAAef,YAE/B,SAAC,KAAD,gBACIM,OAAO,SACPC,WAAS,EACTC,MAAM,WACNQ,KAAK,YACD7C,EAAS,WAAY,CACrBuC,SAAU,uBACVG,QAAS,CACLC,MAAO,wGACPd,QAAS,qCATrB,IAYIH,QAASrB,EAAOyC,SAChBL,WAAU,OAAEpC,QAAF,IAAEA,GAAF,UAAEA,EAAQyC,gBAAV,aAAE,EAAkBjB,YAElC,SAAC,IAAD,CACIkB,UAAWzC,EACX0C,QAAS5C,EACTyC,KAAK,SACLT,WAAS,EACTlB,QAAQ,YACRP,GAAI,CAAEuB,GAAI,EAAGe,GAAI,GANrB,0BAUA,SAAC,KAAD,CAAMC,WAAS,EAAf,UACI,SAAC,KAAD,CAAMC,MAAI,EAAV,UACI,SAAC,KAAD,CAAMC,GAAG,SAAT,SACK,kC,4CCtGhC,KAAeC,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,gOACD,iB","sources":["features/account/Register.tsx","../node_modules/@mui/icons-material/esm/LockOutlined.js"],"sourcesContent":["import {Avatar, Box, Container, Grid, Paper, TextField, Typography} from \"@mui/material\";\nimport {useForm} from \"react-hook-form\";\nimport {Link, useNavigate} from \"react-router-dom\";\nimport {toast} from \"react-toastify\";\nimport agent from \"../../app/api/agent\";\nimport {LoadingButton} from \"@mui/lab\";\nimport {LockOutlined} from '@mui/icons-material';\nimport \"./Account.scss\";\n\nexport default function Register(){\n    const navigate = useNavigate();\n    const {\n        register,\n        handleSubmit,\n        setError,\n        formState: {isSubmitting, errors, isValid},\n    } = useForm({mode: \"all\"});\n\n    function handleApiErrors(errors: any) {\n        if (errors) {\n            errors.forEach((error: string) => {\n                if (error.includes(\"Password\")) {\n                    setError(\"password\", {message: error});\n                } else if (error.includes(\"Email\")) {\n                    setError(\"email\", {message: error});\n                } else if (error.includes(\"Username\")) {\n                    setError(\"username\", {message: error});\n                }\n            });\n        }\n        console.log(errors);\n    }\n    return(\n       <Box className={\"account\"}>\n           <Container className={\"login-form\"} component={Paper} maxWidth=\"sm\" sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', p: 4 }}>\n               <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\n                   <LockOutlined />\n               </Avatar>\n               <Typography component=\"h1\" variant=\"h5\" sx={{color:\"white\"}}>\n                   Enregistrement\n               </Typography>\n               <Box component=\"form\"\n                    onSubmit={handleSubmit((data) =>\n                        agent.Account.register(data)\n                            .then(() => {\n                                toast.success('Registration successful - you can now login');\n                                navigate(\"/login\");\n                               // history.push('/login');\n                            })\n                            .catch(error => handleApiErrors(error))\n                    )}\n                    noValidate sx={{ mt: 1 }}\n               >\n                   <TextField\n                       margin=\"normal\"\n                       fullWidth\n                       label=\"Username\"\n                       autoFocus\n                       {...register('username', { required: 'Username is required' })}\n                       error={!!errors.username}\n                       helperText={errors?.username?.message}\n                   />\n                   <TextField\n                       margin=\"normal\"\n                       fullWidth\n                       label=\"Email address\"\n                       {...register('email', {\n                           required: 'Email is required',\n                           pattern: {\n                               value: /^\\w+[\\w-.]*@\\w+((-\\w+)|(\\w*)).[a-z]{2,3}$/,\n                               message: 'Not a valid email address'\n                           }\n                       })}\n                       error={!!errors.email}\n                       helperText={errors?.email?.message}\n                   />\n                   <TextField\n                       margin=\"normal\"\n                       fullWidth\n                       label=\"Password\"\n                       type=\"password\"\n                       {...register('password', {\n                           required: 'Password is required',\n                           pattern: {\n                               value: /(?=^.{6,10}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;:;'?/&gt;.&lt;,])(?!.*\\s).*$/,\n                               message: 'Password is not complex enough'\n                           }\n                       })}\n                       error={!!errors.password}\n                       helperText={errors?.password?.message}\n                   />\n                   <LoadingButton\n                       disabled={!isValid}\n                       loading={isSubmitting}\n                       type=\"submit\"\n                       fullWidth\n                       variant=\"contained\"\n                       sx={{ mt: 3, mb: 2 }}\n                   >\n                       Enregistrer\n                   </LoadingButton>\n                   <Grid container>\n                       <Grid item>\n                           <Link to='/login'>\n                               {\"Connectez vous.\"}\n                           </Link>\n                       </Grid>\n                   </Grid>\n               </Box>\n           </Container>\n       </Box>\n    )\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\"\n}), 'LockOutlined');"],"names":["Register","navigate","useNavigate","useForm","mode","register","handleSubmit","setError","formState","isSubmitting","errors","isValid","className","component","Paper","maxWidth","sx","display","flexDirection","alignItems","p","m","bgcolor","variant","color","onSubmit","data","agent","then","toast","catch","error","forEach","includes","message","console","log","handleApiErrors","noValidate","mt","margin","fullWidth","label","autoFocus","required","username","helperText","pattern","value","email","type","password","disabled","loading","mb","container","item","to","createSvgIcon","_jsx","d"],"sourceRoot":""}