{"version":3,"file":"static/js/623.078a30c0.chunk.js","mappings":"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","sources":["app/components/AppDialog.tsx","app/components/AppPagination.tsx","../node_modules/@mui/icons-material/esm/ExpandLessOutlined.js","../node_modules/@mui/icons-material/esm/DoDisturb.js","features/profile/OrdersTable.tsx","app/hooks/useOrders.tsx","features/profile/ProfileOrdersPage.tsx","../node_modules/@mui/icons-material/esm/ExpandMoreOutlined.js"],"sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport { TransitionProps } from '@mui/material/transitions';\n\nconst Transition = React.forwardRef(function Transition(\n    props: TransitionProps & {\n        children: React.ReactElement<any, any>;\n    },\n    ref: React.Ref<unknown>,\n) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface Props {\n    open: boolean;\n    okText?: string | null;\n    cancelText?: string | null;\n    title: string;\n    body: string;\n    onClose: (value: boolean) => void;\n    onCloseAsync?: () => Promise<boolean>;\n}\n\nexport default function AppDialog({ open, title, body, okText = \"Ok\", cancelText = \"Cancel\", onClose }: Props) {\n    return (\n        <>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={onClose}\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        {body}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button size=\"small\" variant=\"outlined\" onClick={() => onClose(false)}>{cancelText}</Button>\n                    <Button size=\"small\" variant=\"contained\" onClick={() => onClose(true)}>{okText}</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}","import {Pagination, Typography} from \"@mui/material\";\nimport {Box} from \"@mui/system\";\nimport {useState} from \"react\";\nimport {MetaData} from \"../models/pagination\";\n\ninterface Props {\n    metaData: MetaData;\n    onPageChange: (page: number) => void;\n}\n\nexport default function AppPagination({metaData, onPageChange}: Props) {\n    const {currentPage, totalCount, totalPages, pageSize} = metaData;\n    const [pageNumber, setPageNumber] = useState(currentPage);\n\n    function handlePageChange(page: number) {\n        setPageNumber(page);\n        onPageChange(page);\n    }\n\n    return (\n        <Box display='flex' justifyContent='space-between' alignItems='center'  width={\"100%\"} sx={{flexDirection:{xs:\"column\", md:\"row\"} , my:3}}>\n            <Typography variant={\"body2\"} gutterBottom>\n                Showing {(currentPage - 1) * pageSize + 1} to {currentPage * pageSize > totalCount\n                    ? totalCount\n                    : currentPage * pageSize} of {totalCount} items\n            </Typography>\n            {metaData && metaData.totalPages > 1 && (\n                <Pagination sx={{flexWrap:\"nowrap\", mb: {xs:7, md:1}, mt:{xs:2,md:0}}}\n                    color='primary'\n                    size='medium'\n                    count={totalPages}\n                    page={pageNumber}\n                    defaultPage={1}\n                    siblingCount={1}\n                    onChange={(e, page) => handlePageChange(page)}\n                />\n            )}\n        </Box>\n    )\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14l-6-6z\"\n}), 'ExpandLessOutlined');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zM4 12c0-4.4 3.6-8 8-8 1.8 0 3.5.6 4.9 1.7L5.7 16.9C4.6 15.5 4 13.8 4 12zm8 8c-1.8 0-3.5-.6-4.9-1.7L18.3 7.1C19.4 8.5 20 10.2 20 12c0 4.4-3.6 8-8 8z\"\n}), 'DoDisturb');","import {Box, Collapse, Container, Divider, Grid, List, ListItem, Paper, Stack, Typography} from \"@mui/material\";\nimport {useState} from \"react\";\nimport agent from \"../../app/api/agent\";\nimport {useAppDispatch} from \"../../app/store/configureStore\";\nimport useOrders from \"../../app/hooks/useOrders\";\nimport {format} from \"date-fns\";\nimport AppPagination from \"../../app/components/AppPagination\";\nimport {setPageNumber, updateOrder} from \"../../app/slices/orderSlice\";\nimport {currencyFormat} from \"../../app/util/util\";\nimport {DoDisturb, ExpandLessOutlined, ExpandMoreOutlined} from \"@mui/icons-material\";\nimport {LoadingButton} from \"@mui/lab\";\nimport AppDialog from \"../../app/components/AppDialog\";\n\n\nexport default function OrdersTable() {\n    const dispatch = useAppDispatch();\n    const [loading, setLoading] = useState(false);\n    const [target, setTarget] = useState(0);\n    const {orders, ordersLoaded, metaData} = useOrders();\n    const [collapsed, setCollapsed] = useState<{ id: number | null }>({id: null});\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const [selectedOrder, setSelectedOrder] = useState<number>(0)\n\n\n    function handleDialogOnClose(value: boolean) {\n        if (value && selectedOrder > 0) {\n            handleCancelOrder(selectedOrder);\n        }\n        setDialogOpen(false);\n    }\n\n    const cancelOrder = (id: number) => {\n        setSelectedOrder(id);\n        setDialogOpen(true);\n    }\n\n    function handleCancelOrder(orderId: number) {\n        setLoading(true);\n        setTarget(orderId);\n        agent.Orders.cancelOrder(orderId)\n            .then(_ => {\n                dispatch(updateOrder({id: orderId, changes: {status: \"cancelled\"}}))\n            })\n            .catch(e => console.log(e))\n            .finally(() => setLoading(false));\n    }\n\n\n    const handleCollapsed = (id: number) =>\n        setCollapsed({id: collapsed.id === id ? null : id});\n\n    const showMessage = (message: string = \"Loading\") => (\n        <Box height={\"100%\"} width={\"100%\"} display={\"flex\"} justifyContent={\"center\"} alignItems={\"center\"}>\n            <Typography variant={\"caption\"}>{message}</Typography>\n        </Box>\n    )\n\n\n    return (\n        <Box sx={{overflow: \"auto\", py: 3}}>\n\n            {!ordersLoaded && showMessage(\"Loading Orders\")}\n\n            {ordersLoaded && orders.length === 0 && showMessage(\"Your orders list is empty.\")}\n\n            {orders.length > 0 && (\n                <Grid container spacing={3}>\n                    {orders.map(order => (\n                        <Grid key={order.id} item xs={12}>\n                            <Paper sx={{py: 3, height: \"100%\"}}>\n                                <Container>\n                                    <Grid container spacing={1}>\n                                        <Grid item md={3} xs={12}>\n                                            <Stack>\n                                                <Typography variant={\"caption\"}>Order Date</Typography>\n                                                <Typography\n                                                    variant={\"body1\"}>{format(new Date(order.orderDate), \"dd/MM/yy HH:mm\")}</Typography>\n                                            </Stack>\n                                        </Grid>\n\n                                        <Grid item md={5} xs={12}>\n                                            <Stack>\n                                                <Typography variant={\"caption\"}>Delivery Address</Typography>\n                                                <Typography variant={\"body1\"}>\n                                                    {order.shippingAddress.address1} - {order.shippingAddress.town ?? order.shippingAddress.suburb}\n                                                </Typography>\n\n                                            </Stack>\n                                        </Grid>\n\n                                        <Grid item md={2} xs={6}>\n                                            <Typography variant={\"caption\"}>\n                                                Order Status\n                                            </Typography>\n                                            <Typography variant={\"body1\"}>\n                                                {order.status}\n                                            </Typography>\n                                        </Grid>\n\n                                        <Grid item md={2} xs={6} display={\"flex\"} justifyContent={\"flex-end\"}\n                                              flexDirection={\"column\"}>\n                                            <Typography variant={\"caption\"} textAlign={\"right\"}>\n                                                Total\n                                            </Typography>\n                                            <Typography textAlign={\"right\"} variant={\"body1\"}>\n                                                {currencyFormat(order.subtotal, \"$\")}\n                                            </Typography>\n                                        </Grid>\n\n                                        <Grid item xs={12}>\n                                            <Divider/>\n                                            <Stack\n                                                sx={{\n                                                    mt: 1,\n                                                    justifyContent: \"space-between\"\n                                                }}\n                                                direction={\"row\"}>\n                                                <LoadingButton size={\"small\"} color={\"inherit\"} startIcon={\n                                                    collapsed.id !== order.id ? (\n                                                        <ExpandMoreOutlined fontSize=\"large\" color=\"primary\"/>\n                                                    ) : (\n                                                        <ExpandLessOutlined fontSize=\"large\" color=\"inherit\"/>\n                                                    )\n                                                }\n                                                               onClick={() => handleCollapsed(order.id)}>\n                                                    View Items\n                                                </LoadingButton>\n                                                {order.status === \"Pending\" && (\n                                                    <LoadingButton\n                                                        onClick={() => cancelOrder(order.id)}\n                                                        loading={loading && target === order.id}\n                                                        startIcon={<DoDisturb/>}\n                                                        color={\"error\"}>\n                                                        Cancel\n                                                    </LoadingButton>\n                                                )}\n                                            </Stack>\n                                        </Grid>\n\n                                        <Grid item xs={12}>\n                                            <Collapse in={collapsed.id === order.id}>\n                                                <Divider/>\n                                                <List dense sx={{my: 1}}>\n                                                    {order.items.map(item => (\n                                                        <ListItem key={item.productId}>\n                                                            <Grid container>\n                                                                <Grid item xs={8}>\n                                                                    <Typography\n                                                                        variant={\"body1\"}>{item.name}</Typography>\n                                                                </Grid>\n\n                                                                <Grid item xs={2} display={\"flex\"} flexDirection={\"row\"}\n                                                                      alignItems={\"center\"} justifyContent={\"center\"}>\n                                                                    <Typography variant={\"body2\"}>x </Typography>\n                                                                    <Typography\n                                                                        variant={\"body1\"}>{item.quantity}</Typography>\n                                                                </Grid>\n                                                                <Grid item xs={2}>\n                                                                    <Typography variant={\"body1\"}\n                                                                                textAlign={\"right\"}>{currencyFormat(item.price * item.quantity, \"$\")}</Typography>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </ListItem>\n                                                    ))}\n                                                </List>\n                                            </Collapse>\n                                        </Grid>\n                                    </Grid>\n                                </Container>\n                            </Paper>\n                        </Grid>\n                    ))}\n\n                    <Grid item xs={12}>\n                        {metaData &&\n                            <AppPagination\n                                metaData={metaData}\n                                onPageChange={(page: number) => dispatch(setPageNumber({pageNumber: page}))}\n                            />}\n                    </Grid>\n                </Grid>\n            )\n            }\n\n            <AppDialog\n                open={dialogOpen}\n                title=\"Cancel Order\"\n                onClose={handleDialogOnClose}\n                body={\"Are you sure you want to cancel this order?\"}\n            />\n\n        </Box>\n    )\n}","import {useAppDispatch, useAppSelector} from \"../store/configureStore\";\nimport {useEffect} from \"react\";\nimport {fetchOrdersAsync, orderSelectors} from \"../slices/orderSlice\";\n\nexport default function useOrders() {\n    const orders = useAppSelector(orderSelectors.selectAll);\n    const {\n        ordersLoaded,\n        metaData,\n    } = useAppSelector((state) => state.order);\n    const dispatch = useAppDispatch();\n\n\n    useEffect(() => {\n        if (!ordersLoaded) {\n            dispatch(fetchOrdersAsync());\n        }\n    }, [dispatch, ordersLoaded]);\n\n\n    return {\n        orders,\n        ordersLoaded,\n        metaData,\n    };\n}","import {Box, Button, Container, Stack, Typography} from \"@mui/material\";\nimport {Link} from \"react-router-dom\";\nimport OrdersTable from \"./OrdersTable\";\n\nexport default function ProfileOrdersPage() {\n\n\n    return (\n        <Box sx={{\n            height: \"100%\",\n            width: \"100%\",\n            minHeight: \"100Vh\",\n        }}>\n            <Container sx={{py: {md: 5, xs: 2}, pt: {md: 10, xs: 2}}}>\n                <Stack sx={{width: \"100%\", pb: 4}} display={\"flex\"} flexDirection=\"row\" alignItems=\"center\"\n                       justifyContent=\"space-between\">\n                    <Typography\n                        variant={\"h4\"}\n                        component={\"h1\"}\n                        sx={{textTransform: \"uppercase\"}}\n                    >\n                        Orders\n                    </Typography>\n\n                    <Button variant=\"text\" color=\"inherit\" size=\"small\" component={Link} to=\"/profile\">\n                        Back to profile\n                    </Button>\n                </Stack>\n                <OrdersTable/>\n            </Container>\n        </Box>\n    )\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\"\n}), 'ExpandMoreOutlined');"],"names":["Transition","React","props","ref","direction","AppDialog","open","title","body","okText","cancelText","onClose","TransitionComponent","keepMounted","id","size","variant","onClick","AppPagination","metaData","onPageChange","currentPage","totalCount","totalPages","pageSize","useState","pageNumber","setPageNumber","display","justifyContent","alignItems","width","sx","flexDirection","xs","md","my","gutterBottom","flexWrap","mb","mt","color","count","page","defaultPage","siblingCount","onChange","e","handlePageChange","createSvgIcon","_jsx","d","OrdersTable","dispatch","useAppDispatch","loading","setLoading","target","setTarget","orders","useAppSelector","orderSelectors","state","order","ordersLoaded","useEffect","fetchOrdersAsync","useOrders","collapsed","setCollapsed","dialogOpen","setDialogOpen","selectedOrder","setSelectedOrder","showMessage","message","Box","height","Typography","overflow","py","length","Grid","container","spacing","map","item","Paper","Container","Stack","format","Date","orderDate","shippingAddress","address1","town","suburb","status","textAlign","currencyFormat","subtotal","Divider","LoadingButton","startIcon","ExpandMoreOutlined","fontSize","ExpandLessOutlined","DoDisturb","Collapse","in","List","dense","items","ListItem","name","quantity","price","productId","value","orderId","agent","then","_","updateOrder","changes","catch","console","log","finally","ProfileOrdersPage","minHeight","pt","pb","component","textTransform","Button","Link","to"],"sourceRoot":""}