{"version":3,"file":"static/js/411.b9bca462.chunk.js","mappings":"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","sources":["app/components/AppTextInput.tsx","app/components/AppCheckbox.tsx","features/checkout/AddressForm.tsx","features/checkout/Review.tsx","features/checkout/checkoutValidation.ts","features/checkout/CheckoutPage.tsx"],"sourcesContent":["import { TextField } from \"@mui/material\";\nimport { useController, UseControllerProps } from \"react-hook-form\";\n\ninterface Props extends UseControllerProps {\n    label: string;\n    multiline?: boolean;\n    rows?: number;\n    type?: string;\n}\n\nexport default function AppTextInput(props: Props) {\n    const {fieldState, field} = useController({...props, defaultValue: ''})\n    return (\n        <TextField \n            {...props}\n            {...field}\n            multiline={props.multiline}\n            rows={props.rows}\n            type={props.type}\n            fullWidth\n            variant='outlined'\n            error={!!fieldState.error}\n            helperText={fieldState.error?.message}\n        />\n    )\n}","import { Checkbox, FormControlLabel } from \"@mui/material\";\nimport { useController, UseControllerProps } from \"react-hook-form\"\n\ninterface Props extends UseControllerProps {\n    label: string;\n    disabled: boolean;\n}\n\nexport default function AppCheckbox(props: Props) {\n    const {field} = useController({...props, defaultValue: false});\n    return (\n        <FormControlLabel \n            control={\n                <Checkbox \n                    {...field}\n                    checked={field.value}\n                    color='secondary'\n                    disabled={props.disabled}\n                />\n            }\n            label={props.label}\n        />\n    )\n}","import Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport {useFormContext} from 'react-hook-form';\nimport AppTextInput from '../../app/components/AppTextInput';\nimport AppCheckbox from '../../app/components/AppCheckbox';\nimport {Box} from \"@mui/material\";\n\nexport default function AddressForm() {\n    const {control, formState} = useFormContext();\n    return (\n        <Box maxWidth={800} sx={{mx: \"auto\"}}>\n            <Typography variant=\"h6\" sx={{mb: 3}}>\n                Shipping address\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={12} sm={12}>\n                    <AppTextInput control={control} name='fullName' label='Full name'/>\n                </Grid>\n                <Grid item xs={12} md={8}>\n                    <AppTextInput control={control} name='address1' label='Address'/>\n                </Grid>\n\n                <Grid item xs={12} sm={6} md={4}>\n                    <AppTextInput control={control} name='city' label='City'/>\n                </Grid>\n\n                <Grid item xs={12}>\n                    <AppCheckbox\n                        disabled={!formState.isDirty}\n                        name='saveAddress'\n                        label='Save this as the default address'\n                        control={control}\n                    />\n                </Grid>\n            </Grid>\n        </Box>\n    );\n}","import {Grid, List, ListItem} from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport {useAppSelector} from '../../app/store/configureStore';\nimport React from \"react\";\nimport BasketMenuItem from \"../basket/BasketMenuItem\";\n\nexport default function Review() {\n    const {basket, status} = useAppSelector(state => state.basket);\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                Order summary\n            </Typography>\n            {basket && (\n                <List>\n                    {basket.items.map(item => (\n                        <ListItem key={item.productId} sx={{}}>\n                            <BasketMenuItem item={item} status={status}/>\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <Grid container>\n                <Grid item xs={6}/>\n                <Grid item xs={6}>\n                    {/*<BasketSummary />*/}\n                </Grid>\n            </Grid>\n        </>\n    );\n}","import * as yup from 'yup';\n\nexport const AddressFormValidation = yup.object({\n    fullName: yup.string().required('Please enter your name'),\n    address1: yup.string().required('Please enter your address'),\n    city: yup.string().required(),\n\n})\n","import {Box, Button, Container, Paper, Step, StepLabel, Stepper, Typography} from \"@mui/material\";\nimport {useEffect, useState} from \"react\";\nimport {FieldValues, FormProvider, useForm} from \"react-hook-form\";\nimport AddressForm from \"./AddressForm\";\nimport Review from \"./Review\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport {AddressFormValidation} from \"./checkoutValidation\";\nimport agent from \"../../app/api/agent\";\nimport {LoadingButton} from \"@mui/lab\";\nimport {useAppDispatch} from \"../../app/store/configureStore\";\nimport \"./CheckoutPage.scss\";\nimport {clearBasket} from \"../../app/slices/basketSlice\";\n\n\nconst steps = ['Address', 'Review', \"Receipt\"];\n\nexport default function CheckoutPage() {\n    const [activeStep, setActiveStep] = useState(0);\n    const [orderNumber, setOrderNumber] = useState(0);\n    const [loading, setLoading] = useState(false);\n    const dispatch = useAppDispatch();\n\n    //const {basket} = useAppSelector(state => state.basket);\n\n    function getStepContent(step: number) {\n        switch (step) {\n            case 0:\n                return <AddressForm/>;\n            case 1:\n                return <Review/>;\n\n            default:\n                throw new Error('Unknown step');\n        }\n    }\n\n\n    const methods = useForm({\n        mode: 'all',\n        resolver: yupResolver(AddressFormValidation)\n    });\n\n    useEffect(() => {\n        agent.Account.fetchAddress()\n            .then(response => {\n                if (response) {\n                    methods.reset({...methods.getValues(), ...response, saveAddress: false})\n                }\n            })\n    }, [methods])\n\n    async function submitOrder(data: FieldValues) {\n        setLoading(true);\n        const {saveAddress, ...shippingAddress} = data;\n\n        try {\n            const orderNumber = await agent.Orders.create({saveAddress, shippingAddress});\n            setOrderNumber(orderNumber);\n            //setActiveStep(activeStep + 1);\n            dispatch(clearBasket());\n\n        } catch (error) {\n            console.log(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    const handleNext = async (data: FieldValues) => {\n        if (activeStep === 1) {\n            await submitOrder(data);\n        } else {\n            setActiveStep(activeStep + 1);\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n\n    function submitDisabled(): boolean {\n        return !methods.formState.isValid\n    }\n\n    return (\n        <Box className={\"payment\"}>\n            <Container sx={{pt: 7,}}>\n                <FormProvider {...methods}>\n                    <Paper variant=\"outlined\"\n                           sx={{\n                               maxWidth: 800,\n                               my: {xs: 3, md: 6},\n                               mx: \"auto\",\n                               p: {xs: 2, md: 3},\n                               backgroundColor: \"rgba(0,0,0,0.5)\"\n                           }}>\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                            Order\n                        </Typography>\n                        <Stepper activeStep={activeStep} sx={{pt: 3, pb: 5}}>\n                            {steps.map((label) => (\n                                <Step key={label}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            ))}\n                        </Stepper>\n                        <>\n                            {activeStep === steps.length ? (\n                                <>\n                                    <Typography variant=\"subtitle1\">\n                                        Your order number is #{orderNumber}. We have emailed your order\n                                        confirmation, and will not send you an update when your order has\n                                        shipped!\n                                    </Typography>\n                                </>\n                            ) : (\n                                <form onSubmit={methods.handleSubmit(handleNext)}>\n                                    {getStepContent(activeStep)}\n                                    <Box sx={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        {activeStep !== 0 && (\n                                            <Button onClick={handleBack} sx={{mt: 3, ml: 1}}>\n                                                Back\n                                            </Button>\n                                        )}\n                                        <LoadingButton\n                                            loading={loading}\n                                            disabled={submitDisabled()}\n                                            variant=\"contained\"\n                                            type='submit'\n                                            sx={{mt: 3, ml: 1}}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Place order' : 'Next'}\n                                        </LoadingButton>\n                                    </Box>\n                                </form>\n                            )}\n                        </>\n                    </Paper>\n                </FormProvider>\n            </Container>\n        </Box>\n\n    );\n}\n"],"names":["AppTextInput","props","useController","defaultValue","fieldState","field","TextField","multiline","rows","type","fullWidth","variant","error","helperText","message","AppCheckbox","FormControlLabel","control","Checkbox","checked","value","color","disabled","label","AddressForm","useFormContext","formState","Box","maxWidth","sx","mx","Typography","mb","Grid","container","spacing","item","xs","sm","name","md","isDirty","Review","useAppSelector","state","basket","status","gutterBottom","List","items","map","ListItem","BasketMenuItem","productId","AddressFormValidation","yup","fullName","required","address1","city","steps","CheckoutPage","useState","activeStep","setActiveStep","orderNumber","setOrderNumber","loading","setLoading","dispatch","useAppDispatch","methods","useForm","mode","resolver","yupResolver","submitOrder","data","saveAddress","shippingAddress","agent","clearBasket","console","log","useEffect","then","response","reset","getValues","handleNext","className","Container","pt","Paper","my","p","backgroundColor","component","align","Stepper","pb","Step","StepLabel","length","onSubmit","handleSubmit","step","Error","getStepContent","display","justifyContent","Button","onClick","mt","ml","LoadingButton","isValid"],"sourceRoot":""}