{"version":3,"file":"static/js/557.33a2c017.chunk.js","mappings":"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","sources":["app/components/AppDialog.tsx","app/components/AppPagination.tsx","../node_modules/@mui/icons-material/esm/ExpandLessOutlined.js","../node_modules/@mui/icons-material/esm/Recommend.js","../node_modules/@mui/icons-material/esm/DoDisturb.js","features/profile/OrdersTable.tsx","app/hooks/useOrders.tsx","features/profile/ProfileOrdersPage.tsx","../node_modules/@mui/icons-material/esm/ExpandMoreOutlined.js"],"sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport { TransitionProps } from '@mui/material/transitions';\n\nconst Transition = React.forwardRef(function Transition(\n    props: TransitionProps & {\n        children: React.ReactElement<any, any>;\n    },\n    ref: React.Ref<unknown>,\n) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface Props {\n    open: boolean;\n    okText?: string | null;\n    cancelText?: string | null;\n    title: string;\n    body: string;\n    onClose: (value: boolean) => void;\n    onCloseAsync?: () => Promise<boolean>;\n}\n\nexport default function AppDialog({ open, title, body, okText = \"Ok\", cancelText = \"Cancel\", onClose }: Props) {\n    return (\n        <>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={onClose}\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        {body}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button size=\"small\" variant=\"outlined\" onClick={() => onClose(false)}>{cancelText}</Button>\n                    <Button size=\"small\" variant=\"contained\" onClick={() => onClose(true)}>{okText}</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}","import {Pagination, Typography} from \"@mui/material\";\nimport {Box} from \"@mui/system\";\nimport {useState} from \"react\";\nimport {MetaData} from \"../models/pagination\";\n\ninterface Props {\n    metaData: MetaData;\n    onPageChange: (page: number) => void;\n}\n\nexport default function AppPagination({metaData, onPageChange}: Props) {\n    const {currentPage, totalCount, totalPages, pageSize} = metaData;\n    const [pageNumber, setPageNumber] = useState(currentPage);\n\n    function handlePageChange(page: number) {\n        setPageNumber(page);\n        onPageChange(page);\n    }\n\n    return (\n        <Box display='flex' justifyContent='space-between' alignItems='center'  width={\"100%\"} sx={{flexDirection:{xs:\"column\", md:\"row\"} , my:3}}>\n            <Typography variant={\"body2\"} gutterBottom>\n                Showing {(currentPage - 1) * pageSize + 1} to {currentPage * pageSize > totalCount\n                    ? totalCount\n                    : currentPage * pageSize} of {totalCount} items\n            </Typography>\n            {metaData && metaData.totalPages > 1 && (\n                <Pagination sx={{flexWrap:\"nowrap\", mb: {xs:7, md:1}, mt:{xs:2,md:0}}}\n                    color='primary'\n                    size='medium'\n                    count={totalPages}\n                    page={pageNumber}\n                    defaultPage={1}\n                    siblingCount={1}\n                    onChange={(e, page) => handlePageChange(page)}\n                />\n            )}\n        </Box>\n    )\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14l-6-6z\"\n}), 'ExpandLessOutlined');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm6 9.8a.9.9 0 0 1-.1.5l-2.1 4.9a1.34 1.34 0 0 1-1.3.8H9a2 2 0 0 1-2-2v-5a1.28 1.28 0 0 1 .4-1L12 5l.69.69a1.08 1.08 0 0 1 .3.7v.2L12.41 10H17a1 1 0 0 1 1 1z\"\n}), 'Recommend');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zM4 12c0-4.4 3.6-8 8-8 1.8 0 3.5.6 4.9 1.7L5.7 16.9C4.6 15.5 4 13.8 4 12zm8 8c-1.8 0-3.5-.6-4.9-1.7L18.3 7.1C19.4 8.5 20 10.2 20 12c0 4.4-3.6 8-8 8z\"\n}), 'DoDisturb');","import { Box, Collapse, Container, Divider, Grid, List, ListItem, Paper, Stack, Typography } from \"@mui/material\";\nimport { useState } from \"react\";\nimport agent from \"../../app/api/agent\";\nimport { useAppDispatch } from \"../../app/store/configureStore\";\nimport useOrders from \"../../app/hooks/useOrders\";\nimport { format } from \"date-fns\";\nimport AppPagination from \"../../app/components/AppPagination\";\nimport { setPageNumber, updateOrder } from \"../../app/slices/orderSlice\";\nimport { currencyFormat } from \"../../app/util/util\";\nimport { DoDisturb, ExpandLessOutlined, ExpandMoreOutlined, Recommend } from \"@mui/icons-material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport AppDialog from \"../../app/components/AppDialog\";\n\ninterface Props {\n    isAdmin: boolean\n}\n\nexport default function OrdersTable({ isAdmin }: Props) {\n    const dispatch = useAppDispatch();\n    const [loading, setLoading] = useState(false);\n    const [target, setTarget] = useState(0);\n    const { orders, ordersLoaded, metaData } = useOrders();\n    const [collapsed, setCollapsed] = useState<{ id: number | null }>({ id: null });\n    const [open, setOpen] = useState(false);\n    const [dialogAction, setDialogAction] = useState<{ id: number, action: string } | null>(null)\n\n\n    const cancelOrder = (id: number) => {\n        setDialogAction({ id, action: \"Cancelled\" });\n        setOpen(true);\n    }\n    const confirmOrder = (id: number) => updateOrderStatus(id, \"Confirmed\")\n\n    //const resetPendingOrder = (id: number) => { updateOrderStatus(id, \"Pending\") }\n\n\n    function handleDialogOnClose(value: boolean) {\n        if (value && dialogAction) {\n            updateOrderStatus(dialogAction.id, dialogAction.action);\n        }\n        setOpen(false);\n    }\n\n\n    function updateOrderStatus(entityId: number, value: string) {\n        setLoading(true);\n        setTarget(entityId);\n        agent.Orders.updateStatus(entityId, value)\n            .then(response => {\n                dispatch(updateOrder({ id: entityId, changes: { status: value } }))\n            })\n            .catch(e => console.log(e))\n            .finally(() => setLoading(false));\n    }\n\n    const handleCollapsed = (id: number) =>\n        setCollapsed({ id: collapsed.id === id ? null : id });\n\n    const showMessage = (message: string = \"Loading\") => (\n        <Box height={\"100%\"} width={\"100%\"} display={\"flex\"} justifyContent={\"center\"} alignItems={\"center\"}>\n            <Typography variant={\"caption\"}>{message}</Typography>\n        </Box>\n    )\n\n\n    return (\n        <Box sx={{ overflow: \"auto\", py: 3 }}>\n\n            {!ordersLoaded && showMessage(\"Loading Orders\")}\n\n            {ordersLoaded && orders.length === 0 && showMessage(\"Your orders list is empty.\")}\n\n            {orders.length > 0 && (\n                <Grid container spacing={3}>\n                    {orders.map(order => (\n                        <Grid key={order.id} item xs={12}>\n                            <Paper sx={{ py: 3, height: \"100%\" }}>\n                                <Container>\n                                    <Grid container spacing={1}>\n                                        <Grid item md={3} xs={12}>\n                                            <Stack>\n                                                <Typography variant={\"caption\"}>Order Date</Typography>\n                                                <Typography\n                                                    variant={\"body1\"}>{format(new Date(order.orderDate), \"dd/MM/yy HH:mm\")}</Typography>\n                                            </Stack>\n                                        </Grid>\n\n                                        <Grid item md={5} xs={12}>\n                                            <Stack>\n                                                <Typography variant={\"caption\"}>Delivery Address</Typography>\n                                                <Typography variant={\"body1\"}>\n                                                    {order.shippingAddress.address1} - {order.shippingAddress.town ?? order.shippingAddress.suburb}\n                                                </Typography>\n\n                                            </Stack>\n                                        </Grid>\n\n                                        <Grid item md={2} xs={6}>\n                                            <Typography variant={\"caption\"}>\n                                                Order Status\n                                            </Typography>\n                                            <Typography variant={\"body1\"}>\n                                                {order.status}\n                                            </Typography>\n                                        </Grid>\n\n                                        <Grid item md={2} xs={6} display={\"flex\"} justifyContent={\"flex-end\"}\n                                            flexDirection={\"column\"}>\n                                            <Typography variant={\"caption\"} textAlign={\"right\"}>\n                                                Total\n                                            </Typography>\n                                            <Typography textAlign={\"right\"} variant={\"body1\"}>\n                                                {currencyFormat(order.subtotal, \"$\")}\n                                            </Typography>\n                                        </Grid>\n\n                                        <Grid item xs={12}>\n                                            <Divider />\n                                            {isAdmin ? (\n                                                <Stack sx={{ mt: 1 }} direction={\"row\"} justifyContent={\"space-evenly\"}\n                                                    flexWrap={\"wrap\"}>\n                                                    <LoadingButton size={\"small\"} color={\"inherit\"}\n                                                        onClick={() => handleCollapsed(order.id)}\n                                                        startIcon={\n                                                            collapsed.id !== order.id ? (\n                                                                <ExpandMoreOutlined fontSize=\"large\"\n                                                                    color=\"primary\" />\n                                                            ) : (\n                                                                <ExpandLessOutlined fontSize=\"large\"\n                                                                    color=\"inherit\" />\n                                                            )\n                                                        }>\n                                                        View\n                                                    </LoadingButton>\n                                                    <LoadingButton\n                                                        onClick={() => confirmOrder(order.id)}\n                                                        loading={loading && target === order.id}\n                                                        size={\"small\"}\n                                                        color={\"success\"}\n                                                        startIcon={<Recommend />}>\n                                                        Confirm\n                                                    </LoadingButton>\n                                                    {order.status === \"Pending\" && (\n                                                        <LoadingButton\n                                                            onClick={() => cancelOrder(order.id)}\n                                                            loading={loading && target === order.id}\n                                                            size={\"small\"}\n                                                            startIcon={<DoDisturb />}\n                                                            color={\"error\"}>\n                                                            Cancel\n                                                        </LoadingButton>\n                                                    )}\n\n                                                </Stack>\n                                            ) : (\n                                                <Stack\n                                                    sx={{\n                                                        mt: 1,\n                                                        justifyContent: { xs: \"space-evenly\", md: \"space-between\" }\n                                                    }}\n                                                    direction={\"row\"}>\n                                                    <LoadingButton color={\"inherit\"} startIcon={\n                                                        collapsed.id !== order.id ? (\n                                                            <ExpandMoreOutlined fontSize=\"large\" color=\"primary\" />\n                                                        ) : (\n                                                            <ExpandLessOutlined fontSize=\"large\" color=\"inherit\" />\n                                                        )\n                                                    }\n                                                        onClick={() => handleCollapsed(order.id)}>\n                                                        View Items\n                                                    </LoadingButton>\n                                                    {order.status === \"Pending\" && (\n                                                        <LoadingButton\n                                                            onClick={() => cancelOrder(order.id)}\n                                                            loading={loading && target === order.id}\n                                                            startIcon={<DoDisturb />}\n                                                            color={\"error\"}>\n                                                            Cancel\n                                                        </LoadingButton>\n                                                    )}\n                                                </Stack>\n                                            )}\n                                        </Grid>\n\n                                        <Grid item xs={12}>\n                                            <Collapse in={collapsed.id === order.id}>\n                                                <Divider />\n                                                <List dense sx={{ my: 1 }}>\n                                                    {order.items.map(item => (\n                                                        <ListItem key={item.productId}>\n                                                            <Grid container>\n                                                                <Grid item xs={8}>\n                                                                    <Typography\n                                                                        variant={\"body1\"}>{item.name}</Typography>\n                                                                </Grid>\n\n                                                                <Grid item xs={2} display={\"flex\"} flexDirection={\"row\"}\n                                                                    alignItems={\"center\"} justifyContent={\"center\"}>\n                                                                    <Typography variant={\"body2\"}>x </Typography>\n                                                                    <Typography\n                                                                        variant={\"body1\"}>{item.quantity}</Typography>\n                                                                </Grid>\n                                                                <Grid item xs={2}>\n                                                                    <Typography variant={\"body1\"}\n                                                                        textAlign={\"right\"}>{currencyFormat(item.price * item.quantity, \"$\")}</Typography>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </ListItem>\n                                                    ))}\n                                                </List>\n                                            </Collapse>\n                                        </Grid>\n                                    </Grid>\n                                </Container>\n                            </Paper>\n                        </Grid>\n                    ))}\n\n                    <Grid item xs={12}>\n                        {metaData &&\n                            <AppPagination\n                                metaData={metaData}\n                                onPageChange={(page: number) => dispatch(setPageNumber({ pageNumber: page }))}\n                            />}\n                    </Grid>\n                </Grid>\n            )\n            }\n\n            <AppDialog\n                open={open}\n                title=\"Cancel Order\"\n                onClose={handleDialogOnClose}\n                body={\"Are you sure you want to cancel this order?\"}\n            />\n\n        </Box >\n    )\n}","import {useAppDispatch, useAppSelector} from \"../store/configureStore\";\nimport {useEffect} from \"react\";\nimport {fetchOrdersAsync, orderSelectors} from \"../slices/orderSlice\";\n\nexport default function useOrders() {\n    const orders = useAppSelector(orderSelectors.selectAll);\n    const {\n        ordersLoaded,\n        metaData,\n    } = useAppSelector((state) => state.order);\n    const dispatch = useAppDispatch();\n\n\n    useEffect(() => {\n        if (!ordersLoaded) {\n            dispatch(fetchOrdersAsync());\n        }\n    }, [dispatch, ordersLoaded]);\n\n\n    return {\n        orders,\n        ordersLoaded,\n        metaData,\n    };\n}","import { Box, Button, Container, CssBaseline, Stack, ThemeProvider, Typography } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport AppDialog from \"../../app/components/AppDialog\";\nimport { LightTheme } from \"../../app/layout/App\";\nimport OrdersTable from \"./OrdersTable\";\n\nexport default function ProfileOrdersPage() {\n\n\n\n    return (\n        <ThemeProvider theme={LightTheme}>\n            <CssBaseline />\n            <Box sx={{\n                height: \"100%\",\n                width: \"100%\",\n                backgroundColor: \"#EEEEEE\",\n                minHeight: \"100Vh\",\n                color: \"black\",\n            }}>\n                <Container sx={{ py: { md: 5, xs: 2 }, pt: { md: 10, xs: 2 } }}>\n                    <Stack sx={{ width: \"100%\", pb: 4 }} display={\"flex\"} flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n                        <Typography\n                            variant={\"h4\"}\n                            component={\"h1\"}\n                            sx={{ textTransform: \"uppercase\" }}\n                        >\n                            Orders\n                        </Typography>\n\n                        <Button variant=\"text\" color=\"inherit\" size=\"small\" component={Link} to=\"/profile\">\n                            Back to profile\n                        </Button>\n                    </Stack>\n                    <OrdersTable isAdmin={false} />\n                </Container>\n            </Box>\n        </ThemeProvider>\n    )\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\"\n}), 'ExpandMoreOutlined');"],"names":["Transition","React","props","ref","direction","AppDialog","open","title","body","okText","cancelText","onClose","TransitionComponent","keepMounted","id","size","variant","onClick","AppPagination","metaData","onPageChange","currentPage","totalCount","totalPages","pageSize","useState","pageNumber","setPageNumber","display","justifyContent","alignItems","width","sx","flexDirection","xs","md","my","gutterBottom","flexWrap","mb","mt","color","count","page","defaultPage","siblingCount","onChange","e","handlePageChange","createSvgIcon","_jsx","d","OrdersTable","isAdmin","dispatch","useAppDispatch","loading","setLoading","target","setTarget","orders","useAppSelector","orderSelectors","state","order","ordersLoaded","useEffect","fetchOrdersAsync","useOrders","collapsed","setCollapsed","setOpen","dialogAction","setDialogAction","cancelOrder","action","updateOrderStatus","entityId","value","agent","then","response","updateOrder","changes","status","catch","console","log","finally","handleCollapsed","showMessage","message","Box","height","Typography","overflow","py","length","Grid","container","spacing","map","item","Paper","Container","Stack","format","Date","orderDate","shippingAddress","address1","town","suburb","textAlign","currencyFormat","subtotal","Divider","LoadingButton","startIcon","ExpandMoreOutlined","fontSize","ExpandLessOutlined","Recommend","DoDisturb","Collapse","in","List","dense","items","ListItem","name","quantity","price","productId","ProfileOrdersPage","ThemeProvider","theme","LightTheme","CssBaseline","backgroundColor","minHeight","pt","pb","component","textTransform","Button","Link","to"],"sourceRoot":""}